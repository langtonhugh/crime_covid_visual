---
title: "Tutorial: visualising lockdown crime trends"
subtitle: "<font size=2> This post will be updated periodically upon new data releases. Please do [get in contact](https://www.samlangton.info/#contact) if you encounter any issues! <font size=4.9>"
tags:
- policing
- crime
- COVID
- R
- ggplot2
editor_options: 
  chunk_output_type: console
date: '2020-07-01'
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F, eval = F)
```


Over the past few weeks I have spent a bit of time exploring police recorded crime trends before and after nationwide lockdowns induced by the COVID19 pandemic. Some of this has involved making [descriptive graphics](https://theconversation.com/lockdown-crime-trends-why-antisocial-behaviour-is-up-140479) across different crime types, using London (UK) as a case study.

In this post, I will take you through how you can create these visuals in `R`. It's worth emphasising that this is simply a demonstration of 'how I get did' not 'how to do it' -- there will be many ways of doing the same thing, some probably more beautiful and concise.

## Background

There has been talk of lockdowns representing the [largest natural experiment in criminological history](https://link.springer.com/article/10.1007/s12103-020-09546-0). Of course, this kind of claim will be challenged, especially when demonstrations involve police recorded crime data. Lots of parameters will have changed beyond people's routine activities, amongst them, people's ability and willingness to report crimes to the police, and policing resource allocation. It might be some time before we can fully understand how lockdowns have curbed the spatial and temporal patterns of crime.

In the meantime, police recorded crime data can offer a unique insight into how criminal behaviour _might_ have changed in the past few months. In the UK, open data is released on a monthly basis. This [isn't ideal](https://the-sra.org.uk/SRA/Blog/whyyoucantidentifychangesincrimebycomparingthismonthtolastmonth.aspx) by any means, but it does allow for some preliminary exploration. Here, we're going to create a descriptive visualisation inspired by some infamous graphs by [the FT](https://www.ft.com/content/a26fbf7e-48f8-11ea-aeb3-955839e06441) used to track COVID19 deaths. 

![](/img/ft_example.png)

One powerful thing about these visuals is that they effortlessly account for _seasonal_ trends in death rates using previous years as a reference point. Readers can then intuitively understand what is 'normal', and identify fluctuations which are irregular, and thus likely a result of COVID19.

Similarly, a key characteristic of long-term crime trends is seasonality. To disentangle fluctuations in crime, and pinpoint irregularity resulting from lockdown measures, we must account for typical monthly fluctuations. We can do this descriptively (and visually) using open police recorded crime data and some packages in `R`.

For now, we will focus on the base visual -- perhaps in further posts I can demonstrate how to more accurately mimic the 'FT look'. We'll aim for something like the graphic below, representing multiple crime type trends in London from January 2016 to May 2020.

![](/img/full_met.png)

## Project and packages

To make following this tutorial easier, some of you might want to download the associated repository on GitHub. By working within the R project on the repository, and using the same folder structure, the subsequent code won't need to be edited. Any data we download should just be placed into the **data** folder, and named accordingly. Whatever works for you!

Although we are mainly using `ggplot2` for the visual, we use a number of other packages for data wrangling and plot arrangement. Load them using `library()` now. If you don't have some of these packages, ensure they are installed using `install.packages()`.

```{r}
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(cowplot)
library(stringr)
```

## Open crime data

First, we need the data. There are several ways to download [open police data](https://data.police.uk/) in the UK. There is an [API](https://data.police.uk/docs/), an [R package](https://github.com/njtierney/ukpolice), and a [direct download page](https://data.police.uk/data/) from the website.

Here, we are going to get most of the data through direct download from the [online data portal](https://data.police.uk/data/). Remembering that we want previous years as our reference point, we are going to select the widest date range possible (at the time of writing), which is the 36 months spanning from June 2017 to May 2020. As new data is released, this 36-month window will shift. So for example, once June 2020 becomes available, you will only be able to download July 2017 to June 2020. This isn't a huge deal, but remember to take that into account when following subsequent steps.

You can select the latest 36-month range using the dropdown menus, and then tick whatever police force(s) we want. In this example, I am going to use the Metropolitan Police Service, which serve Greater London. So, our selection will look something like this:

![](/img/dates_met.png)

We can then 'Generate file' at the bottom of the page, and on the next page, download a .zip file containing all our crime data for the past 36 months. Here, I call the .zip file **met_police_june2017_to_june2020** and save it to a local folder named **data**, as per the associated GitHub repository.

Ideally, I'd like to go even further back, before June 2017, to get the best picture possible about seasonal crime trends. We can do this using the open [archive](https://data.police.uk/data/archive/) data. This comes in a pretty unfriendly format, because you cannot download by force, and cannot select specific time periods. Anyway, you can download all the data prior to June 2017 using a direct download from the [archive page](https://data.police.uk/data/archive/) and the following option:

![](/img/archive.png)

Remember that if your 36-month window is more recent than this demonstration, you will need to select a different corresponding archive folder! I name mine **archive_to_jun_2017** and save it in the same **data** folder. Note that this might take 5-10 minutes to download, depending on your internet connection. Once unzipped, you should have two folders in your **data** folder, named accordingly. Mine look like this:

![](/img/file_names.png)

## Loading the data

You will notice that, once unzipped, data for the last 36 months (named **met_police_june2017_to_june2020**) is spread across multiple folders -- one for each month. This is not ideal, but using some tricks in `R` we can automatically load these files and bind them together into one data frame.

First, let's generate a list containing all the working directories and .csv files in the downloaded folder. Note that we are taking the location and name of the folder relative to where our R project is saved (`"data/met_police_june2017_to_june2020/"`), extracting the name of every .csv file contained within it, and pasting them together.

```{r}
# Extract list of working directories + file names for each csv.
file_names <- paste("data/met_police_june2017_to_june2020/", list.files("data/met_police_june2017_to_june2020", "*.csv", recursive=TRUE), sep = "")
```

Printing the object `file_names` to your Console will provide you with the working directory and file name of the .csv files -- of which there are 36 -- contained within **met_police_june2017_to_june2020**. We can then load all of these .csv files into `R` by looping the `read_csv()` function from `readr` through the `file_names` object.

```{r}
# Loop through each to load.
met_list <- lapply(file_names, read_csv)
```

Okay, we are nearly there. We can complete the missing months for 2017 using the archive material. Again, remember that you might need additional months depending on the 36-month time window you're using. Here, we only need January to May, so rather than use another loop, let's just load them individually, assigning them to meaningful object names.

```{r}
jan17_df <- read_csv("data/archive_to_jun_2017/2017-01/2017-01-metropolitan-street.csv")
feb17_df <- read_csv("data/archive_to_jun_2017/2017-02/2017-02-metropolitan-street.csv") 
mar17_df <- read_csv("data/archive_to_jun_2017/2017-03/2017-03-metropolitan-street.csv") 
apr17_df <- read_csv("data/archive_to_jun_2017/2017-04/2017-04-metropolitan-street.csv") 
may17_df <- read_csv("data/archive_to_jun_2017/2017-05/2017-05-metropolitan-street.csv") 
```

Finally (the interesting bit is coming, I promise), let's extract the monthly data for 2016 from the archive data, so we have the complete set from 2016-2020. We do this like the first example, but with a few extra options to ensure that we select data from the Metropolitan Police only, rather than every police force. Remember that the archive data automatically contains data from every police force -- but we only want the Met.

```{r}
# Extract 2016 for the Met only.
dates_2016 <- list.files("data/archive_to_jun_2017", pattern = "2016")
extra <- paste("data/archive_to_jun_2017", "/", dates_2016, "/", dates_2016, "-", "metropolitan-street.csv", sep = "")

# Load in loop.
met_2016_list <- lapply(extra, read_csv)
```

Now, at last, we can bind all these data together row-wise using `bind_rows()`. The resulting object `met_full_df` contains all records for the Metropolitan Police from Janury 2016 to May 2020. Okay, it's been a bit of palavar, but we have managed to download and compile over 4.5 million crime records with (relative) ease. Hurrah!

```{r}
# Bind these to existing data frame objects.
met_full_df <- bind_rows(met_2016_list, jan17_df, feb17_df, mar17_df, apr17_df, may17_df, met_recent_df)
```

## Visual plot

What we have currently are individual records of crime recorded by the Met from January 2016 to May 2020. We can aggregate these records by month, year and crime type using a series of functions in `dplyr` along with the piping operator `%>%`. Note the steps taken. We first filter out 'other crimes' -- a crude decision simply because I don't think this crime type offers much insight. We then create separate month and year variables, group by months, years and crime type, count the number of crimes for each combination, arrange for easy viewing, and then ungroup. The final step splits the data frame into a list of data frames by each crime type, so we can easily generate a plot for each crime type later.

```{r}
# Counts.
met_stats_df <- met_full_df %>%                             # select the data frame
  filter(`Crime type` != "Other crime")                     # filter out other crimes
  separate(Month, into = c("Year","Month"), sep = "-") %>%  # create new 'month' and 'year' variables
  group_by(Year, Month, `Crime type`) %>%                   # group by year, month and crime type
  summarise(counts = n()) %>%                               # count rows per group combination
  arrange(`Crime type`, Year, Month) %>%                    # sort data frame for viewing with View()
  ungroup() %>%                                             # ungroup data frame
  split_group(`Crime type`)                                 # split into lists of df by crime type

```

We can then create the `ggplot` function which will be used to generate the plots for each crime type.

```{r}
# Base visual function.
plot_fun <- function(x){
  ggplot() +
    geom_line(data = filter(x, Year != 2020),
              mapping = aes(x = Month, y = counts, group = Year),
              colour = "lightgrey") +
    geom_vline(data = x,
               mapping = aes(xintercept = 2.7),
               linetype = "dotted") + 
    stat_summary(data = filter(x, Year != 2020),
                 aes(x = Month, y = counts, group = Year),
                 fun = mean, colour = "white", geom = "line", group=1, size = 0.8) +
    stat_summary(data = filter(x, Year != 2020),
                 aes(x = Month, y = counts, group = Year),
                 fun = mean, colour = "black", geom = "line", group=1, size = 0.7) +
    geom_line(data = filter(x, Year == 2020),
              mapping = aes(x = Month, y = counts, group = 1),
              colour = "white", size = 1.1) +
    geom_line(data = filter(x, Year == 2020),
              mapping = aes(x = Month, y = counts, group = 1),
              colour = "tomato", size = 1) +
    scale_x_discrete(labels = c(" ","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec")) +
    scale_y_continuous(limits = c(0.6*min(x$counts), 1.4*max(x$counts))) +
    labs(x = NULL, y = NULL) +
    theme_bw() +
    theme(axis.title = element_blank(),
          axis.text.x = element_blank(),
          axis.text.y = element_text(size = 6),
          axis.ticks = element_blank(),
          plot.title = element_text(size = 8))  
}
```

This function can then be looped through `met_stats_list`, the list of data frames by crime type. Note that we first name each data frame in the list so that we can add titles automatically. In doing so, we also remove the underscores. The resulting object `met_stats_plots` is a list of ggplot objects, visualising crime trends for each crime type.

```{r}
# Create a character vector naming each crime type, which helps us automatically add titles to our plots.
names(met_stats_list) <- sort(unique(met_full_df$`Crime type`))

# Make plots and add titles.
met_stats_plots <- list()
for (i in seq(met_stats_list)) {
  gg <- plot_fun(met_stats_list[[i]]) +
    labs(title = str_replace_all(string = names(met_stats_list[i]), "_", " "))
  met_stats_plots[[i]] <- gg
}
```

We can arrange the list of plots using the `plot_grid()` function from `cowplot` to get a basic summary of crime trends in London.

```{r}
# Plot grid.
plot_grid(plotlist = met_stats_plots, ncol = 3)
```

![](/img/full_met_basic.png)

## Annotating and arranging

The problem with the above graph is the lack of annotation. Rather than add a legend, we can simply annotate one of these plots. The starkest trend is probably anti-social behaviour, so let's retrieve this plot from our list.

```{r}
# Pluck out ASB for annotation.
Anti_social_behaviour <- pluck(met_stats_plots, 1)
```

We can then add arrows and text labels using `annotate()`. This seems rather fiddly at first (because it is) but once you're used to it, stating accurate x and y arguments is quite straightforward. Note that by specifying `axis.text.x` we bring back the x-axis annotation we used in the original function, specifying the months.

```{r}
# Annotate.
asb <- Anti_social_behaviour +
  theme(axis.text.x = element_text(size = 6, angle = 90, vjust = -1.5)) +
  labs(title = "Anti-social behaviour") +
  #2020 label
  annotate(geom = "curve" , x = 7, y = 73000, xend = 5, yend = 61000,
           curvature = 0.3, arrow = arrow(length = unit(1, "mm"))) +
  annotate(geom = "text", x = 7.8, y = 73000, label = "2020", fontface = "bold", size = 3) +
  #lockdown label
  annotate(geom = "curve", x = 4, y = 9000, xend = 2.8, yend = 9000,
           curvature = 0.1, arrow = arrow(length = unit(1, "mm"))) +
  annotate(geom = "text", x = 5.5, y = 9000, label = "Lockdown", fontface = "bold", size = 3) +
  #recent years label
  annotate(geom = "curve", x = 8, y = 38500, xend = 8.3, yend = 26000,
           curvature = -0.1, arrow = arrow(length = unit(1, "mm"))) +
  annotate(geom = "text", x = 8, y = 43000, label = "Recent years (inc. mean)", fontface = "bold", size = 3) 
```

Now we've made a separate (annotated) plot for anti-social behaviour, we can get rid of the one contained in our original list.

```{r}
# Remove ASB for plot list to avoid repeat.
met_stats_plots[[1]] <- NULL
```

Then comes the arranging. Here, I use the `plot_grid` function from the amusingly named `cowplot` package. Again, this is quite fiddly -- an alternative might be [patchwork](https://github.com/thomasp85/patchwork), but I am quite familiar with cowplot already. Note that we actually create two separate cowplots -- one for anti-social behaviour, and one for our main plots -- and then stick them together. 

```{r}
asb_blank <- plot_grid(asb, NULL, nrow = 1)
all_plots <- plot_grid(plotlist = met_stats_plots, nrow = 4)
full_plot <- plot_grid(asb_blank, all_plots, nrow = 2, rel_heights = c(2,5))
```

You can then print the plot to your **Viewer** or save it.

```{r}
# Save
ggsave(full_plot, filename = "visuals/full_met.png", height = 8, width = 6)
```

![](/img/full_met.png)

## Conclusion

